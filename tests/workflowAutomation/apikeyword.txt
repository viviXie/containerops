*** Keywords ***
createNewComponent
    [Arguments]    ${url}    ${namespace}    ${body}    ${message}    ${statuscode}
    Create Session    session    ${url}
    ${resp}=    Post Request    session    /workflow/v1/${namespace}/component    ${body}
    log    ${resp.status_code}
    log    ${resp.content}
    Should Be Equal As Strings    ${resp.status_code}    ${statuscode}
    ${json}=    To JSON    ${resp.content}
    log    ${json}
    Dictionary Should Contain Value    ${json}    ${message}
    ${values}    Get Dictionary Values    ${json}
    log    ${values}
    Delete All Sessions

getComponentList
    [Arguments]    ${url}    ${namespace}    ${statuscode}    ${message}
    Create Session    session    ${url}
    ${resp}=    Get Request    session    /workflow/v1/${namespace}/component
    log    ${resp.status_code}
    log    ${resp.content}
    Should Be Equal As Strings    ${resp.status_code}    ${statuscode}
    Should Contain    ${resp.content}    ${message}
    ${json}    To JSON    ${resp.content}
    ${componentID}    Set Variable    ${json['list'][0]['id']}
    ${componentName}    Set Variable    ${json['list'][0]['name']}
    Delete All Sessions
    [Return]    ${componentID}    ${componentName}

getComponentInfo
    [Arguments]    ${url}    ${namespace}    ${statuscode}    ${componentName}    ${componentID}    ${message}
    Create Session    session    ${url}
    ${resp}=    Get Request    session    /workflow/v1/${namespace}/component/${componentName}?id=${componentID}
    log    ${resp.status_code}
    log    ${resp.content}
    Should Be Equal As Strings    ${resp.status_code}    ${statuscode}
    Should Contain    ${resp.content}    ${message}
    ${json}    To JSON    ${resp.content}
    log    ${json}
    Delete All Sessions

saveComponent
    [Arguments]    ${url}    ${namespace}    ${body}    ${message}    ${statuscode}    ${componentName}
    Create Session    session    ${url}
    ${resp}=    Put Request    session    /workflow/v1/${namespace}/component/${componentName}    ${body}
    log    ${resp.status_code}
    log    ${resp.content}
    Should Be Equal As Strings    ${resp.status_code}    ${statuscode}
    ${json}=    To JSON    ${resp.content}
    log    ${json}
    Dictionary Should Contain Value    ${json}    ${message}
    ${values}    Get Dictionary Values    ${json}
    log    ${values}
    Delete All Sessions

createNewWorkflow
    [Arguments]    ${url}    ${namespace}    ${repository}    ${body}    ${message}    ${statuscode}
    Create Session    session    ${url}
    ${resp}=    Post Request    session    /workflow/v1/${namespace}/${repository}    ${body}
    log    ${resp.status_code}
    log    ${resp.content}
    Should Be Equal As Strings    ${resp.status_code}    ${statuscode}
    ${json}=    To JSON    ${resp.content}
    log    ${json}
    Dictionary Should Contain Value    ${json}    ${message}
    ${values}    Get Dictionary Values    ${json}
    log    ${values}
    Delete All Sessions

getWorkflowList
    [Arguments]    ${url}    ${namespace}    ${repository}    ${statuscode}
    Create Session    session    ${url}
    ${resp}=    Get Request    session    /workflow/v1/${namespace}/${repository}
    log    ${resp.status_code}
    log    ${resp.content}
    Should Be Equal As Strings    ${resp.status_code}    ${statuscode}
    Should Contain    ${resp.content}    id
    Should Contain    ${resp.content}    name
    ${json}    To JSON    ${resp.content}
    Delete All Sessions
    [Return]    ${json['list'][0]['id']}    ${json['list'][0]['name']}

getWorkflowInfo
    [Arguments]    ${url}    ${namespace}    ${repository}    ${statuscode}    ${workflowID}    ${workflowName}
    ...    ${message}
    Create Session    session    ${url}
    ${resp}=    Get Request    session    /workflow/v1/${namespace}/${repository}/${workflowName}/json?id=${workflowID}
    log    ${resp.status_code}
    log    ${resp.content}
    Should Be Equal As Strings    ${resp.status_code}    ${statuscode}
    Should Contain    ${resp.content}    ${message}
    ${json}    To JSON    ${resp.content}
    log    ${json}
    Delete All Sessions

saveWorkflow
    [Arguments]    ${url}    ${namespace}    ${repository}    ${body}    ${message}    ${statuscode}
    ...    ${workflowName}
    Create Session    session    ${url}
    ${resp}=    Put Request    session    /workflow/v1/${namespace}/${repository}/${workflowName}    ${body}
    log    ${resp.status_code}
    log    ${resp.content}
    Should Be Equal As Strings    ${resp.status_code}    ${statuscode}
    ${json}=    To JSON    ${resp.content}
    log    ${json}
    Dictionary Should Contain Value    ${json}    ${message}
    ${values}    Get Dictionary Values    ${json}
    log    ${values}
    Delete All Sessions

setWorkflowEnv
    [Arguments]    ${url}    ${namespace}    ${repository}    ${body}    ${message}    ${statuscode}
    ...    ${workflowName}
    Create Session    session    ${url}
    ${resp}=    Put Request    session    /workflow/v1/${namespace}/${repository}/${workflowName}/env    ${body}
    log    ${resp.status_code}
    log    ${resp.content}
    Should Be Equal As Strings    ${resp.status_code}    ${statuscode}
    ${json}=    To JSON    ${resp.content}
    log    ${json}
    Dictionary Should Contain Value    ${json}    ${message}
    ${values}    Get Dictionary Values    ${json}
    log    ${values}
    Delete All Sessions

getWorkflowEnv
    [Arguments]    ${url}    ${namespace}    ${repository}    ${message}    ${statuscode}    ${workflowID}
    ...    ${workflowName}
    Create Session    session    ${url}
    ${resp}=    Get Request    session    /workflow/v1/${namespace}/${repository}/${workflowName}/env?id=${workflowID}
    log    ${resp.status_code}
    log    ${resp.content}
    Should Be Equal As Strings    ${resp.status_code}    ${statuscode}
    Should Contain    ${resp.content}    ${message}
    ${json}    To JSON    ${resp.content}
    log    ${json}
    Delete All Sessions

modifyWorkflowStatus
    [Arguments]    ${url}    ${namespace}    ${repository}    ${body}    ${message}    ${statuscode}
    ...    ${workflowName}
    Create Session    session    ${url}
    ${resp}=    Put Request    session    /workflow/v1/${namespace}/${repository}/${workflowName}/state    ${body}
    log    ${resp.status_code}
    log    ${resp.content}
    Should Be Equal As Strings    ${resp.status_code}    ${statuscode}
    Should Contain    ${resp.content}    ${message}
    ${json}    To JSON    ${resp.content}
    log    ${json}
    Delete All Sessions

runWorkflow
    [Arguments]    ${url}    ${namespace}    ${repository}    ${body}    ${message}    ${statuscode}
    ...    ${workflowName}
    Create Session    session    ${url}
    ${resp}=    Post Request    session    /workflow/v1/${namespace}/${repository}/${workflowName}/exec    ${body}
    log    ${resp.status_code}
    log    ${resp.content}
    Should Be Equal As Strings    ${resp.status_code}    ${statuscode}
    ${json}=    To JSON    ${resp.content}
    log    ${json}
    Dictionary Should Contain Value    ${json}    ${message}
    ${values}    Get Dictionary Values    ${json}
    log    ${values}
    Delete All Sessions

getWorkflowHistoryList
    [Arguments]    ${url}    ${namespace}    ${repository}    ${message}    ${statuscode}
    Create Session    session    ${url}
    ${resp}=    Get Request    session    /workflow/v1/${namespace}/${repository}/histories
    log    ${resp.status_code}
    log    ${resp.content}
    Should Be Equal As Strings    ${resp.status_code}    ${statuscode}
    Should Contain    ${resp.content}    ${message}
    ${json}    To JSON    ${resp.content}
    log    ${json}
    log    ${json['workflowList'][0]['versionList'][0]['sequenceList'][0]['workflowSequenceID']}
    Delete All Sessions
    [Return]    ${json['workflowList'][0]['versionList'][0]['sequenceList'][0]['workflowSequenceID']}

getWorkflowHistory
    [Arguments]    ${url}    ${namespace}    ${repository}    ${statuscode}    ${workflowID}    ${workflowName}
    ...    ${message}    ${sequenceId}    ${version}
    Create Session    session    ${url}
    ${resp}=    Get Request    session    /workflow/v1/${namespace}/${repository}/${workflowName}/${version}/define
    log    ${resp.status_code}
    log    ${resp.content}
    Should Be Equal As Strings    ${resp.status_code}    ${statuscode}
    Should Contain    ${resp.content}    ${message}
    ${json}    To JSON    ${resp.content}
    log    ${json}
    log    ${json['define']['lineList'][0]['endData']['id']}
    log    ${json['define']['stageList'][0]['id']}
    Delete All Sessions
    [Return]    ${json['define']['lineList'][0]['endData']['id']}    ${json['define']['stageList'][0]['id']}

getGithubEventJson
    [Arguments]    ${url}    ${statuscode}    ${eventName}    ${message}
    Create Session    session    ${url}
    ${resp}=    Get Request    session    /workflow/v1/eventJson/github/${eventName}
    log    ${resp.status_code}
    log    ${resp.content}
    Should Be Equal As Strings    ${resp.status_code}    ${statuscode}
    Should Contain    ${resp.content}    ${message}
    ${json}    To JSON    ${resp.content}
    log    ${json}
    Delete All Sessions

getWorkflowTokenAndUrl
    [Arguments]    ${url}    ${namespace}    ${repository}    ${message}    ${statuscode}    ${workflowID}
    ...    ${workflowName}
    Create Session    session    ${url}
    ${resp}=    Get Request    session    /workflow/v1/${namespace}/${repository}/${workflowName}/token?id=${workflowID}
    log    ${resp.status_code}
    log    ${resp.content}
    Should Be Equal As Strings    ${resp.status_code}    ${statuscode}
    Should Contain    ${resp.content}    ${message}
    ${json}    To JSON    ${resp.content}
    log    ${json}
    Delete All Sessions

getWorkflowActionRunHistory
    [Arguments]    ${url}    ${namespace}    ${repository}    ${message}    ${statuscode}    ${workflowName}
    ...    ${stageName}    ${actionName}    ${actionLogID}
    Create Session    session    ${url}
    ${resp}=    Get Request    session    /workflow/v1/${namespace}/${repository}/${workflowName}/stage/${stageName}/${actionName}/history?actionLogId=${actionLogID}
    log    ${resp.status_code}
    log    ${resp.content}
    Should Be Equal As Strings    ${resp.status_code}    ${statuscode}
    Should Contain    ${resp.content}    ${message}
    ${json}    To JSON    ${resp.content}
    log    ${json}
    Delete All Sessions

getWorkflowActionRelationInfo
    [Arguments]    ${url}    ${namespace}    ${repository}    ${message}    ${statuscode}    ${workflowSequenceID}
    ...    ${workflowName}    ${startActionId}    ${endActionId}
    Create Session    session    ${url}
    ${resp}=    Get Request    session    /workflow/v1/${namespace}/${repository}/${workflowName}/${workflowSequenceID}/lineHistory?startActionId=${startActionId}&endActionId=${endActionId}
    log    ${resp.status_code}
    log    ${resp.content}
    Should Be Equal As Strings    ${resp.status_code}    ${statuscode}
    Should Contain    ${resp.content}    ${message}
    ${json}    To JSON    ${resp.content}
    log    ${json}
    Delete All Sessions

getWorkflowExceptList
    [Arguments]    ${url}    ${namespace}    ${repository}    ${statuscode}    ${message}
    Create Session    session    ${url}
    ${resp}=    Get Request    session    /workflow/v1/${namespace}/${repository}
    log    ${resp.status_code}
    log    ${resp.content}
    Should Be Equal As Strings    ${resp.status_code}    ${statuscode}
    Should Contain    ${resp.content}    ${message}
    Delete All Sessions

componentOps
    [Arguments]    ${url}    ${namespace}    ${repository}    ${body}    ${message}    ${statuscode}
    ...    ${componentName}
    Create Session    session    ${url}
    ${resp}=    Put Request    session    /workflow/v1/${namespace}/${repository}/${componentName}/event    ${body}
    log    ${resp.status_code}
    log    ${resp.content}
    Should Be Equal As Strings    ${resp.status_code}    ${statuscode}
    ${json}=    To JSON    ${resp.content}
    log    ${json}
    #Dictionary Should Contain Value    ${json}    ${message}
    ${values}    Get Dictionary Values    ${json}
    log    ${values}
    Delete All Sessions

componentReg
    [Arguments]    ${url}    ${namespace}    ${repository}    ${body}    ${message}    ${statuscode}
    ...    ${componentName}
    Create Session    session    ${url}
    ${resp}=    Put Request    session    /workflow/v1/${namespace}/${repository}/${componentName}/register    ${body}
    log    ${resp.status_code}
    log    ${resp.content}
    Should Be Equal As Strings    ${resp.status_code}    ${statuscode}
    ${json}=    To JSON    ${resp.content}
    log    ${json}
    Dictionary Should Contain Value    ${json}    ${message}
    ${values}    Get Dictionary Values    ${json}
    log    ${values}
    Delete All Sessions

getComponentExceptList
    [Arguments]    ${url}    ${namespace}    ${statuscode}    ${message}
    Create Session    session    ${url}
    ${resp}=    Get Request    session    /workflow/v1/${namespace}/component
    log    ${resp.status_code}
    log    ${resp.content}
    Should Be Equal As Strings    ${resp.status_code}    ${statuscode}
    Should Contain    ${resp.content}    ${message}
    Delete All Sessions

specifiesWorkflowRunVersion
    [Arguments]    ${url}    ${namespace}    ${repository}    ${body}    ${message}    ${statuscode}
    ...    ${workflowName}    ${version}
    Create Session    session    ${url}
    ${resp}=    Post Request    session    /workflow/v1/${namespace}/${repository}/${workflowName}/exec?version=${version}    ${body}
    log    ${resp.status_code}
    log    ${resp.content}
    Should Be Equal As Strings    ${resp.status_code}    ${statuscode}
    ${json}=    To JSON    ${resp.content}
    log    ${json}
    Dictionary Should Contain Value    ${json}    ${message}
    ${values}    Get Dictionary Values    ${json}
    log    ${values}
    Delete All Sessions
